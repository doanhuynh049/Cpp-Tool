alias
"alias:\n  create an alias for a command"
"alias"
"alias <name>"
"alias <name> <definition>"
"The alias command creates a synonym for a command. When an alias is used as the"
"first word of a command, its definition is used in place of <name>. An alias is"
"similar to a UNIX C shell alias or an OpenVMS DCL symbol. Aliases are useful as"
"shortcuts for frequently used commands."
cd
"cd:\n  change the current working directory"
"cd"
"cd <pathname>"
"The cd command changes the current working directory. If cd is called with an"
"argument, it changes to the directory <pathname>. If cd is called without an"
"argument, it changes to the user's home directory."
connect
"connect:\n  connect to RTserver"
"connect"
"connect warm"
"The connect command connects the process to RTserver (if it is not already"
"connected)."
create
"create:\n  create a message type"
"create msg_type <name> <num> <grammar> [delivery_mode <default_delivery_mode>]"
"  [delivery_timeout <default_delivery_timeout>]"
"  [lb_mode <default_lb_mode>]"
"  [priority <default_priority>]"
"  [user_prop <default_user_prop>]"
"The create command creates a message type in RTmon. Once a new message type is"
"created, the send command can be used to construct and send messages of that"
"type. The create command is useful for prototyping new user-defined message"
"types."
disconnect
"disconnect:\n  disconnect from RTserver"
"disconnect"
"disconnect full"
"The disconnect command disconnects the process from RTserver (if it is"
"connected). The process  no longer receives any messages from RTserver until the"
"connect command is issued again, or until another command (e.g. poll) implicitly"
"establishes a connection."
echo
"echo:\n  display text in the output window of the process"
"echo <argument> <...>"
"The echo command writes the specified arguments (any type) in the command to the"
"normal output window of the process (usually stdout)."
edit
"edit:\n  edit a file"
"edit <filename>"
"The edit command invokes the text editor specified by the Editor option and"
"loads  <filename>. The default editor for UNIX is vi. The default editor for"
"OpenVMS is EDT. The default editor for Windows is NOTEPAD. You may choose any"
"editor or command that is available on the system by entering its name as the"
"Editor option."
help
"help:\n  display usage information about commands"
"help"
"help <command>"
"The help command displays usage information about RTmon commands. If help is"
"called without any arguments, it displays a summary of all RTmon commands. If"
"the argument is the name of a valid command, more detailed information about"
"<command> is displayed "
helpopt
"helpopt:\n  display usage information about options"
"helpopt"
"helpopt <option>"
"The helpopt command displays usage information about RTmon options. If called"
"with the name of a valid option, helpopt displays detailed information about"
"<option>. If called without an option, helpopt displays a one line description"
"for all the options available in RTmon. "
history
"history:\n  view the command interface history"
"history"
"history <n>"
"The history command is used to display a list of all the previously entered"
"commands. When the history command is followed by a number <n> then it lists"
"only the last <n> commands."
poll
"poll:\n  make a one-time request for monitoring information"
"poll client_buffer <client>"
"poll client_cb <client>"
"poll client_cpu <client>"
"poll client_ext <client>"
"poll client_general <client>"
"poll client_info <client>"
"poll client_msg_traffic <client>  - see 'help _poll_cl_msg_traffic'"
"poll client_msg_type <client> <msg_type> - see 'help _poll_ex'"
"poll client_msg_type_ex <client> <msg_type>"
"poll client_names"
"poll client_names_num"
"poll client_option <client> <option>"
"poll client_subject <client> <subject> - see 'help _poll_ex'"
"poll client_subject_ex <client> <subject>"
"poll client_subscribe <client>"
"poll client_subscribe_num <client>"
"poll client_time <client>"
"poll client_version <client>"
"poll project_names"
"poll server_buffer <server> <process>"
"poll server_cpu <server>"
"poll server_conn"
"poll server_general <server>"
"poll server_msg_traffic <server> <process> - see 'help _poll_ex'"
"poll server_msg_traffic_ex <server> <process>"
"poll server_names"
"poll server_option <server> <option>"
"poll server_route <server> <dest_server>"
"poll server_time <server>"
"poll server_start_time <server>"
"poll server_version <server>"
"poll subject_names"
"poll subject_subscribe <subject>"
"\nThe poll command sends a message to request a snapshot of some current"
"monitoring information. Depending on the type of poll performed, the request may"
"go to one or all RTserver and/or RTclient processes. After a poll, the run"
"command can be used to receive and display the poll responses. The poll command"
"uses the TipcMon <Type> Poll API functions (e.g., TipcMonProjectNamesPoll for"
"poll project_names) to send the request."
_poll_cl_msg_traffic
""
"The client_msg_traffic poll has been upgraded to use T_INT8 counters for the"
"traffic stats. When polling new clients, both T_INT4 and T_INT8 values will be"
"returned, and the T_INT8 values will be displayed. When T_INT8 values are not"
"available, the result is truncated to 31 bits. On some very old clients, the"
"result may contain an incorrect sign bit."
"\nIf a client does not return T_INT8 values, an INFO level trace message is"
"displayed."
_poll_ex
""
"The client_msg_type, client_subject, and server_msg_traffic polls have been"
"superseded and are retained for backwards compatibility only. On newer clients,"
"you should always use the '_ex' version of these polls, which will return the"
"traffic stats (when present) as T_INT8 values instead of T_INT4 values."
"\nT_INT4 values are truncated to 31 bits and may contain an incorrect sign bit on"
"on some very old clients."
quit
"quit:\n  quit RTmon"
"quit"
"quit force"
"The quit command causes RTmon to exit."
retrieve
"retrieve:\n  retrieve one or more subjects"
"retrieve <subject1> <subject2> <...>"
"The retrieve command sends a message to the _daq subject to retrieve the current"
"values for all slots in the specified subjects. The command takes a variable"
"number of subjects."
run
"run:\n  process one or more messages"
"run"
"run <num_msgs> [<timeout>]"
"The run command causes RTmon to process one or more messages. "
send
"send:\n  send a message to RTserver for distribution"
"send <msg_type> <dest> <field1>..."
"The send command constructs a message and sends it to RTserver for distribution"
"to all RTclient processes subscribing to the destination subject. The message is"
"specified in RTworks message file format. The outgoing message is not buffered,"
"but is instead flushed immediately to RTserver for distribution."
setopt
"setopt:\n  view or set the value of an option"
"setopt"
"setopt <option>"
"setopt <option> <value>"
"The setopt command is used to view or set the value of an option. If called with"
"<option> and <value>, setopt sets <option> to the new value. If called with"
"<option> only, setopt displays the option name and its current value. If called"
"without arguments, setopt displays all RTmon options and their current values."
sh
"sh:\n  execute a shell command"
"sh <arguments>"
"The sh command executes a shell command. On UNIX this shell is the Bourne shell,"
"on OpenVMS this is DCL, and on Windows this is the shell that you run in the"
"command prompt (DOS box). The <arguments> are passed to the C runtime function"
"system, which in turn passes them to the shell."
Mis matched right brace
Mis matched right brace
source
"source:\n  read and process commands from a file"
"source <filename>"
"The source command reads RTmon commands from a file."
Mis matched right brace
Mis matched right brace
Mis matched right brace
stats
"stats:\n  output CPU and memory usage for RTmon"
"stats"
"The stats command causes RTmon to output CPU and memory usage about the process."
"It returns the accumulated CPU time in milliseconds since the last call to stats"
"was made. It uses the standard C function times to calculate the CPU usage."
Mis matched right brace
Mis matched right brace
subscribe
"subscribe:\n  start subscribing to one or more subjects or list the current subscriptions"
"subscribe"
"subscribe [ -load_balancing_off ] <subject1> <subject2> <...>"
"The subscribe command adds the specified subjects to the list of subjects RTmon"
"is subscribing to. If no subjects are specified, RTmon displays the names of the"
"subjects it is currently subscribed to. The command takes a variable number of"
"subjects."
Mis matched right brace
unalias
"unalias:\n  delete a command alias"
"unalias <name>"
"The unalias command deletes a command alias."
Mis matched right brace
Mis matched right brace
Mis matched right brace
unsetopt
"unsetopt:\n  unset an option"
"unsetopt <option>"
"The unsetopt command unsets an option (makes its value UNKNOWN)."
Mis matched right brace
Mis matched right brace
Mis matched right brace
unsubscribe
"unsubscribe:\n  stop subscribing to one or more subjects"
"unsubscribe <subject1> <subject2> <...>"
"The unsubscribe command deletes the specified subjects from the list of subjects"
"RTmon is subscribing to. The command takes a variable number of subjects."
unwatch
"unwatch:\n  stop watching monitoring information"
"unwatch client_buffer <client>"
"unwatch client_congestion <client>"
"unwatch client_msg_recv <client> <msg_type>"
"unwatch client_msg_send <client> <msg_type>"
"unwatch client_names"
"unwatch client_subscribe <client>"
"unwatch client_time <client>"
"unwatch project_names"
"unwatch server_congestion <server> <process>"
"unwatch server_conn"
"unwatch server_max_client_licenses <server>"
"unwatch server_names"
"unwatch subject_names"
"unwatch subject_subscribe <subject>"
"The unwatch command is used to stop watching monitoring information. The unwatch"
"command uses the TipcMon <Type> SetWatch API functions (e.g.,"
"TipcMonProjectNamesSetWatch for unwatch project_names) to stop the watching."
"categories. For all of the user-specifiable parameters (e.g., <client>, <server>,"
"<subject>, etc.), either a single item can be specified by name, or @ (an at"
"sign) can be used to specify all items that match Monitor_Scope or all items of"
"that type (i.e., all RTclients, all subjects, etc.). For <client> (RTclient"
"processes), <server> (RTserver processes), and <process> (RTclient or RTserver"
"processes), the process is identified by its unique subject. See Specifying"
"Items to be Monitored on page 5-3 for complete information on monitoring"
"parameters.The unwatch command requires an RTmon license."
watch
"watch:\n  display monitoring information whenever it changes"
"watch"
"watch client_buffer <client>"
"watch client_congestion <client> <high_water> <low_water>"
"watch client_msg_recv <client> <msg_type>"
"watch client_msg_send <client> <msg_type>"
"watch client_names"
"watch client_subscribe <client>"
"watch client_time <client>"
"watch project_names"
"watch server_congestion <server> <process> <high_water> <low_water>"
"watch server_conn"
"watch server_max_client_licenses <server>"
"watch server_names"
"watch subject_names"
"watch subject_subscribe <subject>"
"The watch command turns on watching for monitoring information. Depending on the"
"type of watch performed, the request may go to one or all RTserver and/or"
"RTclient processes. Every time the watched information changes, RTmon receives"
"updated information. The run command can be used to receive and display the"
"watch responses. For most watch categories, when watching is turned on RTmon"
"also receives an initial status message so that RTmon can immediately display"
"the current status. The watch command uses the TipcMon <Type> SetWatch API"
"functions (e.g., TipcMonProjectNamesSetWatch for watch project_names) to start"
"the watching."
