/*
 * Copyright (c) 1991-2006 TIBCO Software Inc.
 * All rights reserved.
 * For more information, please contact:
 * TIBCO Software Inc., Palo Alto, California, USA
 *
 * $Id: //dev/packages/tpsi/cpsi/dev/68/src/rtworks/ipcstub.h#1 $
 */

#ifndef _RTWORKS_IPCSTUB_H
#define _RTWORKS_IPCSTUB_H 

#include <rtworks/subj.h>
#include <rtworks/edm.h>
#include <rtworks/msg.h>
#include <rtworks/conn.h>

#if !defined(T_GENERATE_PROTOTYPES)
#ifdef T_OS_WIN32 
#ifdef T_IPC_SOURCE
#define T_GLOBAL_VAR_DEF(stmt) _declspec(dllexport) stmt
#define T_GLOBAL_VAR_REF(stmt) 
#else
#define T_GLOBAL_VAR_DEF(stmt) _declspec(dllexport) stmt
#define T_GLOBAL_VAR_REF(stmt) _declspec(dllimport) stmt
#endif
#else
#define T_GLOBAL_VAR_DEF(stmt) stmt
#define T_GLOBAL_VAR_REF(stmt) extern stmt
#endif
#else
#define T_GLOBAL_VAR_DEF(stmt) 
#define T_GLOBAL_VAR_REF(stmt) 
#endif

/*
 * Subject table stub definitions
 */
typedef struct  T_SUBJECT_TABLE_STRUCT 
                T_IPC_SUBJECT_TABLE_STRUCT,
               *T_IPC_SUBJECT_TABLE;
typedef struct  T_SUBJECT_ELEMENT_STRUCT 
                T_IPC_SUBJECT_ELEMENT_STRUCT,
               *T_IPC_SUBJECT_ELEMENT;
typedef struct  T_SUBJECT_TABLE_TRAV_STRUCT
                T_IPC_SUBJECT_TABLE_TRAV_STRUCT,
               *T_IPC_SUBJECT_TABLE_TRAV;
typedef struct  T_SUBJECT_TABLE_CHANGE_CB_STRUCT 
                T_IPC_ST_CHANGE_CB_STRUCT,
               *T_IPC_ST_CHANGE_CB;
typedef struct  T_SUBJECT_TABLE_TRAV_STATUS_STRUCT 
                T_IPC_ST_TRAV_STATUS_STRUCT,
               *T_IPC_ST_TRAV_STATUS;
 
typedef enum {
  T_IPC_ST_ITEM_INSERTED = T_SUBJECT_TABLE_ITEM_INSERTED,
  T_IPC_ST_ITEM_REMOVED  = T_SUBJECT_TABLE_ITEM_REMOVED
} T_IPC_ST_REASON;
 
typedef T_SUBJECT_TABLE_DESTROY_FUNC    T_IPC_SUBJECT_TABLE_DESTROY_FUNC;
typedef T_SUBJECT_TABLE_TRAVERSE_FUNC   T_IPC_SUBJECT_TABLE_TRAVERSE_FUNC;
typedef T_SUBJECT_TABLE_CHANGE_CB_FUNC  T_IPC_ST_CHANGE_CB_FUNC;

/*
 * ======
 */

/*
 * MSG stub definitions
 */
#define T_IPC_PROTOCOL_VERSION              T_MSG_PROTOCOL_VERSION
#define T_IPC_PROTOCOL_VERSION_BASELINE     T_MSG_PROTOCOL_VERSION_BASELINE
#define T_IPC_PROTOCOL_VERSION_ORIG_ALPHA   T_MSG_PROTOCOL_VERSION_ORIG_ALPHA
#define T_IPC_PROTOCOL_VERSION_LB           T_MSG_PROTOCOL_VERSION_LB
#define T_IPC_PROTOCOL_VERSION_UNIQUE       T_MSG_PROTOCOL_VERSION_UNIQUE
#define T_IPC_PROTOCOL_VERSION_HDR_STR      T_MSG_PROTOCOL_VERSION_HDR_STR
#define T_IPC_PROTOCOL_VERSION_GMD_INIT     T_MSG_PROTOCOL_VERSION_GMD_INIT
#define T_IPC_PROTOCOL_VERSION_40_FINAL     T_MSG_PROTOCOL_VERSION_40_FINAL
#define T_IPC_PROTOCOL_VERSION_50_BETA      T_MSG_PROTOCOL_VERSION_50_BETA
#define T_IPC_PROTOCOL_VERSION_WC           T_MSG_PROTOCOL_VERSION_WC
#define T_IPC_PROTOCOL_VERSION_50_FINAL     T_MSG_PROTOCOL_VERSION_50_FINAL
#define T_IPC_PROTOCOL_VERSION_LOCAL        T_MSG_PROTOCOL_VERSION_LOCAL
#define T_IPC_PROTOCOL_VERSION_51_FINAL     T_MSG_PROTOCOL_VERSION_51_FINAL
#define T_IPC_PROTOCOL_VERSION_52_FINAL     T_MSG_PROTOCOL_VERSION_52_FINAL
#define T_IPC_PROTOCOL_VERSION_CONN_CAP     T_MSG_PROTOCOL_VERSION_CONN_CAP
#define T_IPC_PROTOCOL_VERSION_GMD_STREAM   T_MSG_PROTOCOL_VERSION_GMD_STREAM
#define T_IPC_PROTOCOL_VERSION_SOD          T_MSG_PROTOCOL_VERSION_SOD
#define T_IPC_BROADCAST_VERSION             T_MSG_BROADCAST_VERSION
 
typedef enum {
  T_IPC_FT_INVALID              = T_MSG_FT_INVALID,
  T_IPC_FT_CHAR                 = T_MSG_FT_CHAR,
  T_IPC_FT_BINARY               = T_MSG_FT_BINARY,
  T_IPC_FT_STR                  = T_MSG_FT_STR,
  T_IPC_FT_STR_ARRAY            = T_MSG_FT_STR_ARRAY,
  T_IPC_FT_INT2                 = T_MSG_FT_INT2,
  T_IPC_FT_INT2_ARRAY           = T_MSG_FT_INT2_ARRAY,
  T_IPC_FT_INT4                 = T_MSG_FT_INT4,
  T_IPC_FT_INT4_ARRAY           = T_MSG_FT_INT4_ARRAY,
  T_IPC_FT_INT8                 = T_MSG_FT_INT8,
  T_IPC_FT_INT8_ARRAY           = T_MSG_FT_INT8_ARRAY,
  T_IPC_FT_REAL4                = T_MSG_FT_REAL4,
  T_IPC_FT_REAL4_ARRAY          = T_MSG_FT_REAL4_ARRAY,
  T_IPC_FT_REAL8                = T_MSG_FT_REAL8,
  T_IPC_FT_REAL8_ARRAY          = T_MSG_FT_REAL8_ARRAY,
  T_IPC_FT_REAL16               = T_MSG_FT_REAL16,
  T_IPC_FT_REAL16_ARRAY         = T_MSG_FT_REAL16_ARRAY,
  T_IPC_FT_MSG                  = T_MSG_FT_MSG,
  T_IPC_FT_MSG_ARRAY            = T_MSG_FT_MSG_ARRAY,
  T_IPC_FT_INTERNAL_GROUP       = T_MSG_FT_INTERNAL_GROUP,
  T_IPC_FT_INTERNAL_BOOL        = T_MSG_FT_INTERNAL_BOOL,
  T_IPC_FT_INTERNAL_ID          = T_MSG_FT_INTERNAL_ID,
  T_IPC_FT_INTERNAL_VERBOSE     = T_MSG_FT_INTERNAL_VERBOSE,
  T_IPC_PROP_DELIVERY_MODE      = T_MSG_PROP_DELIVERY_MODE,
  T_IPC_PROP_DEST               = T_MSG_PROP_DEST,
  T_IPC_PROP_PRIORITY           = T_MSG_PROP_PRIORITY,
  T_IPC_PROP_SENDER             = T_MSG_PROP_SENDER,
  T_IPC_PROP_TYPE               = T_MSG_PROP_TYPE,
  T_IPC_PROP_USER_PROP          = T_MSG_PROP_USER_PROP,
  T_IPC_PROP_DEST_SERVER        = T_MSG_PROP_DEST_SERVER,
  T_IPC_PROP_SCOPE              = T_MSG_PROP_SCOPE,
  T_IPC_PROP_DELIVERY_TIMEOUT   = T_MSG_PROP_DELIVERY_TIMEOUT,
  T_IPC_PROP_LB_MODE            = T_MSG_PROP_LB_MODE,
  T_IPC_PROP_HEADER_STR_ENCODE  = T_MSG_PROP_HEADER_STR_ENCODE,
  T_IPC_PROP_LOCAL_DELIVERY     = T_MSG_PROP_LOCAL_DELIVERY,
  T_IPC_FT_GUID                 = T_MSG_FT_GUID,
  T_IPC_FT_GUID_ARRAY           = T_MSG_FT_GUID_ARRAY,
  T_IPC_FT_MSGID                = T_MSG_FT_MSGID,
  T_IPC_FT_MSGID_ARRAY          = T_MSG_FT_MSGID_ARRAY,
  T_IPC_FT_WSTR                 = T_MSG_FT_WSTR,
  T_IPC_FT_WSTR_ARRAY           = T_MSG_FT_WSTR_ARRAY,
  T_IPC_FT_XML                  = T_MSG_FT_XML,
  T_IPC_FT_TIMESTAMP            = T_MSG_FT_TIMESTAMP,
  T_IPC_FT_TIMESTAMP_ARRAY      = T_MSG_FT_TIMESTAMP_ARRAY,
  T_IPC_FT_UTF8                 = T_MSG_FT_UTF8,
  T_IPC_FT_UTF8_ARRAY           = T_MSG_FT_UTF8_ARRAY,
  T_IPC_FT_BOOL                 = T_MSG_FT_BOOL,
  T_IPC_FT_BOOL_ARRAY           = T_MSG_FT_BOOL_ARRAY,
  T_IPC_FT_BYTE                 = T_MSG_FT_BYTE
} T_IPC_FT;
#define T_IPC_PROP_HEADER_ENCODE T_IPC_PROP_HEADER_STR_ENCODE
 
typedef enum {
  T_IPC_DELIVERY_BEST_EFFORT  = T_MSG_DELIVERY_BEST_EFFORT,
  T_IPC_DELIVERY_SOME         = T_MSG_DELIVERY_SOME,
  T_IPC_DELIVERY_ALL          = T_MSG_DELIVERY_ALL,
  T_IPC_DELIVERY_ORDERED      = T_MSG_DELIVERY_ORDERED,
  T_IPC_DELIVERY_PERSISTENT = T_MSG_DELIVERY_PERSISTENT
} T_IPC_DELIVERY_MODE;
#define T_IPC_DELIVERY_GMD(mode)  ((T_IPC_DELIVERY_SOME == (mode)) || (T_IPC_DELIVERY_ALL == (mode)))

typedef enum {
  T_IPC_LB_NONE         = T_MSG_LB_NONE,
  T_IPC_LB_ROUND_ROBIN  = T_MSG_LB_ROUND_ROBIN,
  T_IPC_LB_WEIGHTED     = T_MSG_LB_WEIGHTED,
  T_IPC_LB_SORTED       = T_MSG_LB_SORTED 
} T_IPC_LB_MODE;
#define T_IPC_LB_FIFO T_IPC_LB_WEIGHTED
 
typedef enum {
  T_IPC_MSG_FILE_CREATE_READ          = T_MSG_FILE_CREATE_READ,
  T_IPC_MSG_FILE_CREATE_WRITE         = T_MSG_FILE_CREATE_WRITE,
  T_IPC_MSG_FILE_CREATE_WRITE_BINARY  = T_MSG_FILE_CREATE_WRITE_BINARY,
  T_IPC_MSG_FILE_CREATE_APPEND        = T_MSG_FILE_CREATE_APPEND
} T_IPC_MSG_FILE_CREATE_MODE;

typedef enum {
  T_IPC_MT_LOG_DATA      = T_MT_LOG_DATA,
  T_IPC_MT_LOG_STATUS    = T_MT_LOG_STATUS,
  T_IPC_MT_LOG_INTERNAL  = T_MT_LOG_INTERNAL
} T_IPC_MT_LOG_TYPE;

typedef struct T_MSG_MT_STRUCT
               T_IPC_MT_STRUCT, 
              *T_IPC_MT;
typedef struct T_MSG_MT_ENCRYPT_INFO_STRUCT 
               T_IPC_MT_ENCRYPT_INFO_STRUCT,
              *T_IPC_MT_ENCRYPT_INFO;
typedef struct T_MSG_STRUCT 
               T_IPC_MSG_STRUCT, 
              *T_IPC_MSG;
typedef struct T_MSG_WIRE_STRUCT
               T_IPC_WIRE_STRUCT, 
              *T_IPC_WIRE;
typedef struct T_MSG_FIELD_STRUCT 
               T_IPC_MSG_FIELD_STRUCT, 
              *T_IPC_MSG_FIELD;
typedef struct T_MSG_TRAV_STRUCT 
               T_IPC_MSG_TRAV_STRUCT, 
              *T_IPC_MSG_TRAV;
typedef struct T_MSG_FILE_STRUCT 
               T_IPC_MSG_FILE_STRUCT, 
              *T_IPC_MSG_FILE;
typedef struct T_BUF_STRUCT 
               T_IPC_BUF_STRUCT, 
              *T_IPC_BUF;

typedef T_MSG_MT_TRAV_FUNC  T_IPC_MT_TRAV_FUNC;
typedef T_MSG_TRAV_FUNC     T_IPC_MSG_TRAV_FUNC;
typedef T_MSG_ENCRYPT_FUNC  T_IPC_ENCRYPT_FUNC;
typedef T_MSG_DECRYPT_FUNC  T_IPC_DECRYPT_FUNC;

#define T_IPC_DELIVERY_TIMEOUT_UNSET T_MSG_DELIVERY_TIMEOUT_UNSET

/*
 * ======
 */

/*
 * Session stub definitions
 */
typedef struct T_EDM_STRUCT 
               T_IPC_SESSION_STRUCT, 
              *T_IPC_SESSION;
 
typedef struct T_EDM_OBJECT_STRUCT 
               T_IPC_SESSION_OBJECT_STRUCT,
              *T_IPC_SESSION_OBJECT;

typedef struct T_EDM_DISPATCH_DATA_STRUCT 
               T_IPC_SESSION_DISPATCH_DATA_STRUCT, 
              *T_IPC_SESSION_DISPATCH_DATA;
 
typedef struct T_EDM_TIMEOUT_STRUCT 
               T_IPC_SESSION_TIMEOUT_STRUCT,
              *T_IPC_SESSION_TIMEOUT;

typedef T_EDM_DISPATCH_FUNC T_IPC_SESSION_DISPATCH_FUNC;

typedef enum {
  T_IPC_SESSION_OBJECT_LINK    = T_EDM_OBJECT_LINK,
  T_IPC_SESSION_OBJECT_CONN    = T_EDM_OBJECT_CONN,
  T_IPC_SESSION_OBJECT_SOURCE  = T_EDM_OBJECT_SOURCE,
  T_IPC_SESSION_OBJECT_TIMEOUT = T_EDM_OBJECT_TIMEOUT
} T_IPC_SESSION_OBJECT_TYPE;
 
typedef T_EDM_OBJECT_TRAV_FUNC T_IPC_SESSION_OBJECT_TRAV_FUNC;

#define TipcSessionNoDispatchDf TsessionNoDispatchDf
/*
 * ====
 */

/*
 * Conn stub definitions
 */
typedef enum {
  T_IPC_TIMEOUT_READ        = T_CONN_TIMEOUT_READ,
  T_IPC_TIMEOUT_WRITE       = T_CONN_TIMEOUT_WRITE,
  T_IPC_TIMEOUT_KEEP_ALIVE  = T_CONN_TIMEOUT_KEEP_ALIVE,
  T_IPC_TIMEOUT_DELIVERY    = T_CONN_TIMEOUT_DELIVERY 
} T_IPC_TIMEOUT;

#define T_IPC_POS_PRIORITY        T_CONN_POS_PRIORITY
#define T_IPC_NO_AUTO_FLUSH       T_CONN_NO_AUTO_FLUSH
#define T_IPC_GMD_DIR_NAME        T_CONN_GMD_DIR_NAME 
#define T_IPC_SPOOL_MSG_EXT       T_CONN_SPOOL_MSG_EXT
#define T_IPC_SPOOL_MAP_EXT       T_CONN_SPOOL_MAP_EXT
#define T_IPC_HSN_EXT             T_CONN_HSN_EXT
#define T_IPC_GMD_MEMORY          T_CONN_GMD_MEMORY

#define T_IPC_CONN_ERROR_CB_NUM   T_CONN_ERROR_CB_NUM
#define T_IPC_CONN_ACCEPT_CB_NUM  T_CONN_ACCEPT_CB_NUM
#define T_IPC_CONN_CONNECT_CB_NUM T_CONN_CONNECT_CB_NUM
#define T_IPC_CONN_READ_CB_NUM    T_CONN_READ_CB_NUM
#define T_IPC_CONN_WRITE_CB_NUM   T_CONN_WRITE_CB_NUM   
#define T_IPC_CONN_PROCESS_CB_NUM T_CONN_PROCESS_CB_NUM 
#define T_IPC_CONN_QUEUE_CB_NUM   T_CONN_QUEUE_CB_NUM   
#define T_IPC_CONN_ENCODE_CB_NUM  T_CONN_ENCODE_CB_NUM  
#define T_IPC_CONN_DECODE_CB_NUM  T_CONN_DECODE_CB_NUM  
#define T_IPC_CONN_ENCRYPT_CB_NUM T_CONN_ENCRYPT_CB_NUM 
#define T_IPC_CONN_DECRYPT_CB_NUM T_CONN_DECRYPT_CB_NUM 
#define T_IPC_CONN_WRITE_BUFFER_CHANGE_CB_NUM T_CONN_WRITE_BUFFER_CHANGE_CB_NUM

typedef struct T_CONN_STRUCT 
               T_IPC_CONN_STRUCT, 
              *T_IPC_CONN;
typedef struct T_CONN_SPOOL_STRUCT 
               T_IPC_SPOOL_STRUCT, 
              *T_IPC_SPOOL;
typedef struct T_CONN_HSN_STRUCT 
               T_IPC_HSN_STRUCT, 
              *T_IPC_HSN;
typedef struct T_CONN_ERROR_CB_DATA_STRUCT 
               T_IPC_CONN_ERROR_CB_DATA_STRUCT,
              *T_IPC_CONN_ERROR_CB_DATA;
typedef struct T_CONN_MSG_CB_DATA_STRUCT 
               T_IPC_CONN_MSG_CB_DATA_STRUCT, 
              *T_IPC_CONN_MSG_CB_DATA;
typedef struct T_CONN_ACCEPT_CB_DATA_STRUCT
               T_IPC_CONN_ACCEPT_CB_DATA_STRUCT,
              *T_IPC_CONN_ACCEPT_CB_DATA;
typedef struct T_CONN_CONNECT_CB_DATA_STRUCT
               T_IPC_CONN_CONNECT_CB_DATA_STRUCT,
              *T_IPC_CONN_CONNECT_CB_DATA;
typedef struct T_CONN_READ_CB_DATA_STRUCT
               T_IPC_CONN_READ_CB_DATA_STRUCT, 
              *T_IPC_CONN_READ_CB_DATA;
typedef struct T_CONN_MSG_CB_DATA_STRUCT 
               T_IPC_CONN_WRITE_CB_DATA_STRUCT,
              *T_IPC_CONN_WRITE_CB_DATA;
typedef struct T_CONN_MSG_CB_DATA_STRUCT 
               T_IPC_CONN_PROCESS_CB_DATA_STRUCT,
              *T_IPC_CONN_PROCESS_CB_DATA;
typedef struct T_CONN_MSG_CB_DATA_STRUCT 
               T_IPC_CONN_DEFAULT_CB_DATA_STRUCT,
              *T_IPC_CONN_DEFAULT_CB_DATA;
typedef struct T_CONN_QUEUE_CB_DATA_STRUCT 
               T_IPC_CONN_QUEUE_CB_DATA_STRUCT,
              *T_IPC_CONN_QUEUE_CB_DATA;
typedef struct T_CONN_WRITE_BUFFER_CHANGE_CB_DATA_STRUCT 
               T_IPC_CONN_WRITE_BUFFER_CHANGE_CB_DATA_STRUCT,
              *T_IPC_CONN_WRITE_BUFFER_CHANGE_CB_DATA;
typedef struct T_CONN_ENCODE_CB_DATA_STRUCT
               T_IPC_CONN_ENCODE_CB_DATA_STRUCT, 
              *T_IPC_CONN_ENCODE_CB_DATA;
typedef struct T_CONN_DECODE_CB_DATA_STRUCT
               T_IPC_CONN_DECODE_CB_DATA_STRUCT, 
              *T_IPC_CONN_DECODE_CB_DATA;
typedef struct T_CONN_MSG_FILTER_DATA_STRUCT
               T_IPC_CONN_MSG_FILTER_DATA_STRUCT, 
              *T_IPC_CONN_MSG_FILTER_DATA;

typedef T_CONN_MSG_CB_FUNC        T_IPC_CONN_MSG_CB_FUNC;
typedef T_CONN_ERROR_CB_FUNC      T_IPC_CONN_ERROR_CB_FUNC;
typedef T_CONN_ACCEPT_CB_FUNC     T_IPC_CONN_ACCEPT_CB_FUNC;
typedef T_CONN_CONNECT_CB_FUNC    T_IPC_CONN_CONNECT_CB_FUNC;
typedef T_CONN_READ_CB_FUNC       T_IPC_CONN_READ_CB_FUNC;
typedef T_CONN_WRITE_CB_FUNC      T_IPC_CONN_WRITE_CB_FUNC;
typedef T_CONN_PROCESS_CB_FUNC    T_IPC_CONN_PROCESS_CB_FUNC;
typedef T_CONN_DEFAULT_CB_FUNC    T_IPC_CONN_DEFAULT_CB_FUNC;
typedef T_CONN_ENCRYPT_CB_FUNC    T_IPC_CONN_ENCRYPT_CB_FUNC;
typedef T_CONN_DECRYPT_CB_FUNC    T_IPC_CONN_DECRYPT_CB_FUNC;
typedef T_CONN_QUEUE_CB_FUNC      T_IPC_CONN_QUEUE_CB_FUNC;
typedef T_CONN_WRITE_BUFFER_CHANGE_CB_FUNC      T_IPC_CONN_WRITE_BUFFER_CHANGE_CB_FUNC;
typedef T_CONN_ENCODE_CB_FUNC     T_IPC_CONN_ENCODE_CB_FUNC;
typedef T_CONN_DECODE_CB_FUNC     T_IPC_CONN_DECODE_CB_FUNC;
typedef T_CONN_MSG_SEARCH_FUNC    T_IPC_CONN_MSG_SEARCH_FUNC;
typedef T_CONN_MSG_FILTER_FUNC    T_IPC_CONN_MSG_FILTER_FUNC;

#ifdef __cplusplus
extern "C" {
#endif
T_GLOBAL_VAR_REF(T_IPC_CONN_PROCESS_CB_FUNC TipcCbConnProcessGmdFailure);
T_GLOBAL_VAR_REF(T_IPC_CONN_PROCESS_CB_FUNC TipcCbConnProcessKeepAliveCall);
#ifdef __cplusplus
}
#endif

/*
 * ====
 */

/*
 * Properties stub definitions
 */
typedef T_PROPERTY_TRAV_FUNC T_IPC_PROPERTY_TRAV_FUNC;

typedef T_PROPERTIES T_IPC_PROPERTIES;

/*
 * ====
 */

#endif /* _RTWORKS_IPCSTUB_H_ */ 

